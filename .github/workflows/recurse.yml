name: Recursive Enumeration Worker (3-Layer Parallel)

on:
  workflow_dispatch:
    inputs:
      primary_github_server_url:
        description: 'The server URL of the primary GitHub instance.'
        required: true
      primary_repo_owner:
        description: 'The owner of the primary repository.'
        required: true
      primary_repo_name:
        description: 'The name of the primary repository.'
        required: true
      primary_run_id:
        description: 'The run ID of the primary workflow.'
        required: true
      chunk_package_artifact_name:
        description: 'The name of the artifact package containing all seed chunks.'
        required: true
      secondary_matrix_json:
        description: 'The JSON string representing the matrix of chunks assigned to this worker.'
        required: true

permissions:
  contents: write
  actions: read

jobs:
  process_assigned_chunks_worker:
    name: Process Assigned Chunks (Worker)
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        pair: ${{ fromJson(github.event.inputs.secondary_matrix_json && github.event.inputs.secondary_matrix_json || '[]') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules & binaries
        uses: actions/cache@v3
        with:
          path: |
            $HOME/go/pkg/mod
            ~/.cache/go-build
            $HOME/go/bin
          key: ${{ runner.os }}-go-cache-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-go-cache-

      - name: Download Full Chunks Package from Primary Account
        env:
          GH_TOKEN_PRIMARY_ACCOUNT_READ: ${{ secrets.PAT_FOR_PRIMARY_ACCOUNT_ARTIFACTS_READ }}
          PRIMARY_REPO_OWNER: ${{ github.event.inputs.primary_repo_owner }}
          PRIMARY_REPO_NAME: ${{ github.event.inputs.primary_repo_name }}
          PRIMARY_RUN_ID: ${{ github.event.inputs.primary_run_id }}
          ARTIFACT_NAME_FROM_PRIMARY: ${{ github.event.inputs.chunk_package_artifact_name }}
        shell: bash
        run: |
          echo "WORKER: Downloading artifact '$ARTIFACT_NAME_FROM_PRIMARY' from $PRIMARY_REPO_OWNER/$PRIMARY_REPO_NAME"
          if ! command -v gh &> /dev/null; then
            apt-get update -qy && apt-get install -qy curl && \
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && \
            chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && \
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
            apt-get update -qy && apt-get install -qy gh || { echo "ERROR: gh CLI installation failed.";  }
          fi
          echo "$GH_TOKEN_PRIMARY_ACCOUNT_READ" | gh auth login --with-token
          gh run download "$PRIMARY_RUN_ID" -R "$PRIMARY_REPO_OWNER/$PRIMARY_REPO_NAME" -n "$ARTIFACT_NAME_FROM_PRIMARY" --dir .
          PACKAGE_FILENAME="$ARTIFACT_NAME_FROM_PRIMARY.tar.gz"
          if [ -f "$PACKAGE_FILENAME" ]; then
            echo "Downloaded '$PACKAGE_FILENAME'. Extracting..."
            tar -xzvf "$PACKAGE_FILENAME"
          else
            echo "::error:: Failed to download or find artifact tarball '$PACKAGE_FILENAME'"
            exit 0
          fi

      - name: Run Findomain with GNU Parallel on Chunk
        id: run_parallel
        shell: bash
        run: |
        
          CHUNK_FILE_PATH=${{ matrix.pair.chunk }}
          echo "Processing chunk '$CHUNK_FILE_PATH'..."
          if [ ! -f "$CHUNK_FILE_PATH" ]; then
            echo "ERROR: Chunk file '$CHUNK_FILE_PATH' not found!"
            exit 0
          fi
          SUB_CHUNK_DIR="sub-chunks"
          RAW_RESULTS_FILE="raw_subdomain_results.txt"
          export SUB_CHUNK_DIR
          rm -rf "$SUB_CHUNK_DIR"
          mkdir -p "$SUB_CHUNK_DIR" "${SUB_CHUNK_DIR}/raw_results"
          TOTAL_LINES=$(wc -l < "$CHUNK_FILE_PATH")
          LINES_PER_SUB_CHUNK=$(awk -v t="$TOTAL_LINES" 'BEGIN { print int((t+4)/5) }')
          echo "WORKER: Main chunk has $TOTAL_LINES lines. Splitting into 5 sub-chunks of up to $LINES_PER_SUB_CHUNK lines each."
          split -l "$LINES_PER_SUB_CHUNK" "$CHUNK_FILE_PATH" "${SUB_CHUNK_DIR}/sub_chunk_"
          parallel -j 5 'findomain --file "{}" --external-subdomains --quiet --unique-output "${SUB_CHUNK_DIR}/raw_results/result_{#}.txt"' ::: ${SUB_CHUNK_DIR}/sub_chunk_*
          cat "$SUB_CHUNK_DIR/raw_results"/result_*.txt | sort -u > "$RAW_RESULTS_FILE"
          echo "✅ All done. Consolidated into $RAW_RESULTS_FILE with $(wc -l < "$RAW_RESULTS_FILE") subdomains"

      - name: Install Tools
        run: |
          if ! command -v smap >/dev/null; then go install -v github.com/s0md3v/smap/cmd/smap@latest; fi
          if ! command -v inscope >/dev/null; then go install -v github.com/tomnomnom/hacks/inscope@latest; fi
          if ! command -v anew >/dev/null; then go install -v github.com/tomnomnom/anew@latest; fi
          if ! command -v cut-cdn >/dev/null; then go install github.com/ImAyrix/cut-cdn@latest; fi
          if ! command -v naabu >/dev/null; then go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest; fi
          pip3 install --no-cache-dir ipaddress
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Resolve Discovered Subdomains with PureDNS
        id: run_puredns
        shell: bash
        run: |
          RAW_RESULTS_FILE="raw_subdomain_results.txt"
          PUREDNS_FILE="puredns_file.txt"
          RESOLVED_FILE="puredns_resolved.txt"
          TMP_CLEANMASSDNS=$(mktemp)
          MASSDNS="massdns.txt"
          MASSDNS_FILE="massdns_file.txt"
          if [ ! -s "$RAW_RESULTS_FILE" ]; then echo "INFO: Raw results file is empty. Nothing to resolve."; touch "$RESOLVED_FILE"; exit 0; fi
          wget -qO resolvers.txt https://raw.githubusercontent.com/and0x00/resolvers.txt/refs/heads/main/resolvers.txt
          puredns resolve "$RAW_RESULTS_FILE" -r resolvers.txt --rate-limit 3000 --skip-validation --skip-wildcard-filter --write "$PUREDNS_FILE" --write-massdns "$MASSDNS" --quiet >/dev/null 2>&1
          cat "$PUREDNS_FILE" | inscope -s .scope > "$RESOLVED_FILE" || true
          awk 'NF { sub(/\.$/,"",$1); print }' "$MASSDNS" > "$TMP_CLEANMASSDNS"
          awk ' {gsub(/\r$/,"");sub(/^[ \t]+/,"");sub(/[ \t]+$/,"")} FNR==NR{if($0)patterns[++c]=$0;next} !setup{regex="";for(i=1;i<=c;i++){regex=regex (i>1?"|":"") "("patterns[i]")"};if(regex=="")regex="^\b$";setup=1} $2=="A" && $1~regex ' .scope "$TMP_CLEANMASSDNS" | anew -q "$MASSDNS_FILE"
          rm -f "$TMP_CLEANMASSDNS" "$MASSDNS" "$PUREDNS_FILE"

      - name: Map subdomains to ports with CDN filtering
        id: map_subdomains_cdn
        shell: bash
        run: |
      
          trap '' SIGPIPE

          MASSDNS_FILE="massdns_file.txt"
          SMAP_FILE="smap.txt"
          OUTPUT="subdomain_ports.txt"
          PORTS="1,43,49,70,79,80,81,82,83,84,85,88,102,104,113,135,139,143,175,179,195,264,280,389,443,444,505,515,548,554,591,631,771,783,789,888,898,900,901,993,995,1026,1080,1099,1153,1177,1200,1214,1220,1234,1311,1314,1344,1433,1503,1515,1521,1599,1723,1830,1900,1962,2000,2001,2002,2030,2064,2081,2087,2181,2222,2306,2345,2404,2455,2525,2715,2761,2762,3000,3001,3002,3052,3128,3260,3299,3310,3388,3389,3460,3531,3689,4000,4157,4242,4369,4443,4444,4500,4567,4711,4786,4899,5000,5001,5007,5009,5010,5025,5060,5222,5269,5280,5427,5432,5672,5800,5801,5802,5900,5938,6000,6001,6103,6346,6544,6600,6668,6699,6969,7002,7007,7070,7100,7171,7415,7776,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8080,8081,8082,8083,8084,8085,8087,8088,8118,8126,8181,8291,8443,8880,8881,8882,8883,8884,8885,8886,8887,8888,9000,9001,9002,9003,9030,9050,9080,9090,9100,9530,9600,9633,9999,10000,10001,10005,10134,11112,12345,13013,13666,15000,18245,20000,20256,20547,21379,25001,25565,31337,35000,37777,44818,50000,54138,55000,55555,60129"
          # create per‑runner temp files
          TMP_IP2SUB=$(mktemp)
          TMP_IP_ONLY=$(mktemp)
          TMP_NONCDN=$(mktemp)
          TMP_CDN=$(mktemp)
          TMP_SMAP_NONCDN=$(mktemp)
          TMP_RUSTSCAN=$(mktemp)

          echo "▶ Cleaning & extracting A‑records from $MASSDNS_FILE…"
          # IP SUBDOMAIN
          awk '{ print $3, $1 }' "$MASSDNS_FILE" | sort -k1,1 > "$TMP_IP2SUB"

          echo "▶ Pulling unique IPs…"
          cut -d' ' -f1 "$TMP_IP2SUB" | sort -u > "$TMP_IP_ONLY"

          echo "▶ Filtering non‑CDN IPs with cut-cdn…"
          cat "$TMP_IP_ONLY" | cut-cdn -ua -t 50 -silent -o "$TMP_NONCDN"

          echo "✅ All done. TMP_IP_ONLY contains $(wc -l < "$TMP_IP_ONLY") IP"

          head -n5 "$TMP_IP_ONLY"

          echo "==================================================================="

          echo "✅ All done. TMP_NONCDN contains $(wc -l < "$TMP_NONCDN") IP"

          head -n5 "$TMP_NONCDN"

          echo "==================================================================="

          echo "▶ Deriving CDN IP list…"
          cat "$TMP_IP_ONLY" | anew -d "$TMP_NONCDN" > "$TMP_CDN"

          echo "✅ All done. TMP_CDN contains $(wc -l < "$TMP_CDN") IP"

          head -n5 "$TMP_CDN"

          echo "==================================================================="

          echo "▶ Running smap on non‑CDN IPs…"
          naabu -l "$TMP_NONCDN" -passive -o "$TMP_SMAP_NONCDN" -no-color -silent || true
          # The rustscan command itself remains unchanged as requested
          rustscan -a "$TMP_NONCDN" -p "PORTS" --no-banner -t 5000 --tries 1 -u 50000 --scan-order "Random" -b 300 --greppable --accessible > "$TMP_RUSTSCAN" || true   
          
          cat "$TMP_RUSTSCAN" | awk -F ' -> ' '{ gsub(/[\[\]]/, "", $2); n = split($2, p, ","); for(i=1;i<=n;i++) print $1 ":" p[i] }' | anew -q "$TMP_SMAP_NONCDN" || true
          
          
          echo "✅ All done. TMP_SMAP_NONCDN contains $(wc -l < "$TMP_SMAP_NONCDN") IP" 

          echo "==================================================================="
          head -n5 "$TMP_SMAP_NONCDN"

          echo "==================================================================="
          
          echo "▶ Merging non‑CDN and CDN IP lists into $SMAP_FILE…"
          # TMP_SMAP_NONCDN has IP:PORT, TMP_CDN has bare IP
          
          cat "$TMP_SMAP_NONCDN" "$TMP_CDN" | sort -u > "$SMAP_FILE"

          echo "✅ All done. SMAP_FILE contains $(wc -l < "$SMAP_FILE") IP" 

          echo "==================================================================="
          head -n5 "$SMAP_FILE"

          echo "==================================================================="

          echo "▶ Joining with $SMAP_FILE to produce subdomain:port or subdomain…"
          awk -F: '
            NF==2 { print $1, $2 }    # IP:PORT → IP PORT
            NF==1 { print $1, ""  }   # bare IP → IP <empty>
          ' "$SMAP_FILE" \
            | sort -k1,1 \
            | join - "$TMP_IP2SUB" \
            | { 
              awk '
                # This guard clause ignores blank or malformed lines from the input.
                NF >= 2 { 
                  # Check if the line has 3 fields AND the second field contains only digits.
                  # This is a more robust check than simply seeing if the field is not empty.
                  # The regex /^[0-9]+$/ ensures field 2 is a valid port number.
                  if (NF == 3 && $2 ~ /^[0-9]+$/) { 
                    # If it has a port, print in SUBDOMAIN:PORT format.
                    print $3 ":" $2 
                  } else { 
                    # Otherwise, print just the subdomain. The last field ($NF) is the most
                    # reliable way to get the subdomain, as it works for both 2- and 3-field inputs.
                    print $NF 
                  } 
                }
              '       
            } \
            > "$OUTPUT"

          echo "✅ Generated $OUTPUT (first 5 lines):"
          head -n5 "$OUTPUT"

          # cleanup
          rm -f "$TMP_IP2SUB" "$TMP_IP_ONLY" "$TMP_NONCDN" "$TMP_CDN" "$TMP_SMAP_NONCDN" "$TMP_RUSTSCAN"   

      - name: Sort Resolved Results into Root Domain Folders
        shell: bash
        run: |
          RESOLVED_FILE="puredns_resolved.txt"; PORTS_INPUT_FILE="subdomain_ports.txt"; mkdir -p results
          if [ ! -s "$RESOLVED_FILE" ]; then echo "INFO: PureDNS found no resolvable domains in this chunk."; exit 0; fi
          dsieve -if "$RESOLVED_FILE" -f 2 | sort -u > temp_root_domains.txt
          while read -r parent; do
            if [ -z "$parent" ]; then continue; fi
            mkdir -p "results/$parent"
            outfile="results/$parent/puredns_results.txt"
            grep -E "(^|\\.)${parent//./\\.}(\$)" --color=never "$RESOLVED_FILE" | anew -q "$outfile" || true
            ports_outfile="results/$parent/subdomain_ports.txt"
            grep -E "(^|\\.)${parent//./\\.}(\:|\$)" --color=never "$PORTS_INPUT_FILE" | anew -q "$ports_outfile" || true
          done < temp_root_domains.txt

      - name: Compute SAFE_CHUNK (no slashes)
        run: |
          SAFE_CHUNK="${{ matrix.pair.chunk }}"
          SAFE_CHUNK="$(echo "$SAFE_CHUNK" | tr '/' '_')"
          echo "SAFE_CHUNK=$SAFE_CHUNK" >> $GITHUB_ENV

      - name: Upload Secondary Account Results
        uses: actions/upload-artifact@v4
        with:
          name: recon-results-secondary-${{ env.SAFE_CHUNK }}
          path: results/
          retention-days: 1

  merge_results:
    name: Merge All Secondary Worker Results
    runs-on: ubuntu-latest
    needs: process_assigned_chunks_worker
    if: always()
    outputs:
      has_results: ${{ steps.check_artifacts.outputs.found }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download all result artifacts from this worker account
        uses: actions/download-artifact@v4
        with:
          pattern: 'recon-results-secondary-*' # Downloads only this worker's artifacts
          path: temp-aggregated-results
          merge-multiple: true

      - name: Check if artifacts were downloaded
        id: check_artifacts
        shell: bash
        run: |
          if [ -d "temp-aggregated-results" ] && [ -n "$(ls -A temp-aggregated-results)" ]; then
            echo "-> Artifacts found. Proceeding with merge."
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "-> No artifacts found to merge. Skipping the rest of this job."
            echo "found=false" >> $GITHUB_OUTPUT
          fi
          

      - name: Consolidate all results into root domain folders
        id: consolidate
        shell: bash
        run: |
          
          mkdir -p final_results
          if [ ! -d "temp-aggregated-results" ] || [ -z "$(ls -A temp-aggregated-results)" ]; then
            echo "::warning:: No result artifacts were found from the secondary worker. Nothing to merge."
            echo "has_results=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "INFO: Aggregating all downloaded secondary worker results..."
          for filepath in $(find temp-aggregated-results -type f -name "puredns_results.txt"); do
            parent_domain=$(basename "$(dirname "$filepath")")
            dest_file="final_results/$parent_domain/puredns_results.txt"
            mkdir -p "final_results/$parent_domain"
            cat "$filepath" >> "$dest_file"
          done
          
          for filepath in $(find temp-aggregated-results -type f -name "subdomain_ports.txt"); do
            parent_domain=$(basename "$(dirname "$filepath")")
            dest_file="final_results/$parent_domain/subdomain_ports.txt"
            mkdir -p "final_results/$parent_domain"
            cat "$filepath" >> "$dest_file"
          done
          
          echo "INFO: De-duplicating all aggregated files..."
          for final_file in $(find final_results -type f -name "*.txt"); do
              sort -u -o "$final_file" "$final_file"
          done
          
          if [ -z "$(ls -A final_results)" ]; then
            echo "::warning:: Result artifacts were downloaded, but they contained no valid data to merge."
            echo "has_results=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "has_results=true" >> $GITHUB_OUTPUT
          echo "✅ Successfully consolidated results from the secondary worker."

      - name: Upload Final Consolidated Secondary Artifact
        if: steps.consolidate.outputs.has_results == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-secondary-recon-results
          path: final_results/
          retention-days: 1

commit_all_results:
    name: Commit Secondary Worker Results
    needs: merge_results
    if: always() && needs.merge_results.outputs.has_results == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Download the consolidated secondary results artifact
        uses: actions/download-artifact@v4
        with:
          name: consolidated-secondary-recon-results
          path: final_results

      - name: Organize and Push to store-recon
        shell: bash
        env:
          STORE_RECON_PAT: ${{ secrets.PAT_FOR_SECONDARY_ACCOUNT_REPO }}
          ACCOUNT2_USERNAME: ${{ secrets.ACCOUNT2_REPO_OWNER }}
          STORE: ${{ secrets.STORE }}
          CORRELATION_ID: ${{ github.event.inputs.primary_run_id }}
        run: |
          RESULTS_DIR="${GITHUB_WORKSPACE}/final_results"
          
          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(ls -A "$RESULTS_DIR")" ]; then
            echo "::warning:: Results directory is empty or does not exist. Nothing to commit."
            exit 0
          fi
          
          echo "Cloning ${STORE} to commit results from secondary worker..."
          git config --global user.name "Secondary Worker Bot"
          git config --global user.email "actions-bot@users.noreply.github.com"
          
          TMP_DIR="$(mktemp -d)"
          if ! git clone "https://x-access-token:${STORE_RECON_PAT}@github.com/${ACCOUNT2_USERNAME}/${STORE}.git" "$TMP_DIR"; then
            echo "::error:: Failed to clone the repository. Aborting the commit process."
            exit 0
          fi
          cd "$TMP_DIR"
          
          # --- Reusable function to merge artifact data ---
          run_merge() {
            echo "Merging new secondary results into the repository..."
            for domain_dir in "${RESULTS_DIR}"/*; do
              if [ ! -d "$domain_dir" ]; then continue; fi
              domain_name=$(basename "$domain_dir")
              dest_repo_dir="results/$domain_name"
              mkdir -p "$dest_repo_dir"
              
              # --- MERGE BLOCK 1  ---
              # Logic to process puredns results
              source_puredns_file="$domain_dir/puredns_results.txt"
              dest_all_subs_file="$dest_repo_dir/all_subdomains.txt"
              # FIX: Correctly check if the puredns file exists and is not empty
              if [ -s "$source_puredns_file" ]; then
                # FIX: Correctly sanitize the puredns file, not the ports file
                <"$source_puredns_file" tr -d '\0' \
                  | grep '[[:alnum:]]' \
                  | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' \
                  | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" \
                  > "$source_puredns_file.tmp" && mv "$source_puredns_file.tmp" "$source_puredns_file"

                echo "  -> Merging puredns results into '$dest_all_subs_file'"
                temp_merged_file_1=$(mktemp)
                if [ -f "$dest_all_subs_file" ]; then
                  cat "$source_puredns_file" "$dest_all_subs_file" | sort -u > "$temp_merged_file_1"
                else
                  sort -u "$source_puredns_file" > "$temp_merged_file_1"
                fi
                mv "$temp_merged_file_1" "$dest_all_subs_file"
              fi
              
              # --- MERGE BLOCK 2 (Unchanged as per previous request) ---
              # Logic to process port scan results
              source_ports_file="$domain_dir/subdomain_ports.txt"
              dest_puredns_file="$dest_repo_dir/puredns_result.txt"
              if [ -s "$source_ports_file" ]; then
                <"$source_ports_file" tr -d '\0' \
                  | grep '[[:alnum:]]' \
                  | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' \
                  | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" \
                  > "$source_ports_file.tmp" && mv "$source_ports_file.tmp" "$source_ports_file"
                  
                echo "  -> Merging port data into '$dest_puredns_file'"
                temp_merged_file_2=$(mktemp)
                if [ -f "$dest_puredns_file" ]; then
                  cat "$source_ports_file" "$dest_puredns_file" | sort -u > "$temp_merged_file_2"
                else
                  sort -u "$source_ports_file" > "$temp_merged_file_2"
                fi
                mv "$temp_merged_file_2" "$dest_puredns_file"
              fi
            done
            
            # Stage all changes
            git add results/
          }

          # --- Main Logic ---

          # 1. Perform the initial merge and check for changes
          run_merge
          if git diff --cached --quiet; then
            echo "No new unique data to commit from secondary worker."
            exit 0
          fi
          
          # 2. Commit the changes locally
          echo "Committing changes locally..."
          git commit -m "feat: Add new assets from Secondary Worker scan from Correlation ID: ${CORRELATION_ID}"
          
          # 3. Loop to sync and push the commit, with a robust retry mechanism
          MAX_ATTEMPTS=10
          for (( i=1; i<=MAX_ATTEMPTS; i++ )); do
            echo "[Attempt $i/$MAX_ATTEMPTS] Pushing changes from secondary worker..."
            
            # Optimistic push first
            if git push -v origin main; then
              echo "✅ Successfully pushed new secondary results to ${STORE} on attempt $i."
              exit 0 
            fi
            
            echo "::warning:: Push failed on attempt $i. Fetching latest changes from remote and re-applying local changes."
            
            # If push failed, fetch the latest state from the remote
            git fetch origin main
            if [ $? -ne 0 ]; then
                echo "::error:: Git fetch failed. Cannot safely retry."
                sleep $(( 5 * i ))
                continue # Try again
            fi
            
            # Reset local state to match remote, discarding the old local commit
            git reset --hard origin/main
            
            # Re-run the merge logic on top of the fresh, updated branch
            echo "Re-applying merge logic on top of the updated main branch..."
            run_merge
            
            # Check if there are still changes to commit after the re-merge
            if git diff --cached --quiet; then
              echo "No net new changes to commit after syncing with remote. Another run may have already pushed these results."
              exit 0
            fi
            
            # Re-commit the newly calculated changes
            echo "Re-committing changes for retry attempt..."
            git commit -m "feat: Add new assets from Secondary Worker scan from Correlation ID: ${CORRELATION_ID} (retry)"

            sleep $(( 5 * i ))
          done

          echo "::error:: All $MAX_ATTEMPTS push attempts failed. The job will pass but the commit was NOT pushed."
          exit 0 
          
